import { Button, VerticalBox, TextEdit, SpinBox, CheckBox, ScrollView, Slider, HorizontalBox } from "std-widgets.slint";

import "./res/fonts/Neucha-Regular.ttf";
import "./res/fonts/RubikMoonrocks-Regular.ttf";
import "./res/fonts/IrishGrover-Regular.ttf";

import { MyButton } from "./my-button.slint";
import { Player } from "player.slint";
import { Settings } from "settings.slint";
import { TopLine } from "top-line.slint";

export component AppWindow inherits Window {
    default-font-family: "Neucha";
    // default-font-family: "RubikMoonrocks";
    default-font-size: 24px;

    callback choose_audio_file <=> input_player.choose_file_button_clicked;
    callback save_audio_file <=> output_player.choose_file_button_clicked;

    callback input_play_toggle <=> input_player.play_button_clicked;
    callback output_play_toggle <=> output_player.play_button_clicked;

    callback input_seek <=> input_player.seek_audio;
    callback output_seek <=> output_player.seek_audio;

    in-out property <float> input_playback_position: 0.0;
    in-out property <float> output_playback_position: 0.0;

    in-out property <string> message-text <=> text-input.text;

    callback decode(int) -> string;
    callback encode(int, string);

    callback minimize <=> top-line.minimize;
    callback window <=> top-line.window;
    callback close <=> top-line.close;

    max-width: 1440px;
    max-height: 1024px;
    min-width: 720px;
    min-height: 512px;

    Image {
        source: @image-url("res/background.png");
        image-fit: cover;
        width: parent.width;
        height: parent.height;
    }
    // in-out property <int> counter: 42;
    // callback request-increase-value();


    VerticalLayout {
        padding: 0px;
        spacing: 10px;

        top-line := TopLine {
            x: 0;
            width: parent.width;
        }

        VerticalLayout {
            padding: 10px;
            spacing: 10px;
            input_player := Player {
                filename: "filename.wav";
                position <=> root.input_playback_position;
            }

            decode-settings := Settings {
                check-box-text: "повторы";
                button-text: "де-шифр";
                button-clicked => {
                    message-text = root.decode(self.bits);
                }
            }

                // height: 200px;
                Rectangle {
                    background: black.transparentize(30%);
                    border-radius: 8px;
                // TouchArea {
                text-input := TextInput {
                        font-family: "Neucha";
                        width: 95%;
                        height: 95%;
                        color: white;
                        text: "Тут будет сообщение";
                        single-line: false;
                        wrap: TextWrap.word-wrap;
                    }
                // }

            }

            encode-settings := Settings {
                check-box-text: "повторы";
                button-text: "шифр";

                button-clicked => {
                    root.encode(self.bits, message-text);
                    output-player.filename = "< Unsaved audio >";
                    output-player.duration = input-player.duration;
                }
            }

            output-player := Player {
              file-button-text: "Сохранить файл";
                filename: "filename.wav";
                position <=> root.output_playback_position;
            }
        }
    }
}
