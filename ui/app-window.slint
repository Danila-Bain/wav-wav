import { Button, VerticalBox, TextEdit, SpinBox, CheckBox, ScrollView, Slider, HorizontalBox } from "std-widgets.slint";

import "./res/fonts/Neucha-Regular.ttf";
import "./res/fonts/RubikMoonrocks-Regular.ttf";
import "./res/fonts/IrishGrover-Regular.ttf";

import { MyButton } from "./my-button.slint";
import { Player } from "player.slint";
import { Settings } from "settings.slint";

export component AppWindow inherits Window {
    // no-frame: true;
    default-font-family: "Neucha";
    // default-font-family: "RubikMoonrocks";
    default-font-size: 24px;

    title: "Wav-wav!";
    icon: @image-url("res/icons/dog.png");

    callback choose_audio_file() -> {filename: string, duration: float};
    callback save_audio_file() -> string;

    callback input_play_toggle <=> input_player.play_button_clicked;
    callback output_play_toggle <=> output_player.play_button_clicked;

    callback input_seek <=> input_player.seek_audio;
    callback output_seek <=> output_player.seek_audio;

    in-out property <float> input_playback_position: 0.0;
    in-out property <float> output_playback_position: 0.0;
    in-out property <bool> input_is_playing <=> input_player.playing;
    in-out property <bool> output_is_playing <=> output_player.playing;

    in-out property <string> message-text <=> text-input.text;

    callback decode(int) -> string;
    callback encode(int, string);

    // max-width: 1440px;
    // max-height: 1024px;
    min-width: 720px;
    min-height: 512px;

    Image {
        source: @image-url("res/background.png");
        image-fit: cover;
        width: parent.width;
        height: parent.height;
    }
    // in-out property <int> counter: 42;
    // callback request-increase-value();


        VerticalLayout {
        padding: 10px;
        spacing: 10px;
        input_player := Player {
            filename: "< No File >";
            position <=> root.input_playback_position;

            out property <{filename: string, duration: float}> new;
            file_button_clicked => {
                new = root.choose_audio_file();
                self.filename = new.filename == "" ? self.filename : new.filename;
                self.duration = new.filename == "" ? self.duration : new.duration + 0.001; // avoid division by zero
                    self.playing = self.playing ? self.play_button_clicked() : self.playing;
            }
        }

        decode-settings := Settings {
            check-box-text: "повторы";
            button-text: "де-шифр";
            button-clicked => {
                message-text = root.decode(self.bits);
            }
        }

        Rectangle {
            background: black.transparentize(30%);
            border-radius: 8px;
            Text {
                x: 5px;
                y: 5px;
                color: white.transparentize(50%);
                text: text-input.text == "" ? "Сообщение после дешифровки или для шифрования" : "";
                    // vertical-alignment: TextVerticalAlignment.top;
                    // horizontal-alignment: TextHorizontalAlignment.left;
                }

            text-input := TextInput {
                font-family: "Neucha";
                width: parent.width - 10px;
                height: parent.height - 10px;
                color: white;
                text: "";
                single-line: false;
                wrap: TextWrap.word-wrap;
            }
        }

        encode-settings := Settings {
            check-box-text: "повторы";
            button-text: "шифр";

            button-clicked => {
                root.encode(self.bits, message-text);
                output-player.filename = "< Unsaved audio >";
                output-player.duration = input-player.duration;
            }
        }

        output-player := Player {
            file-button-text: "Сохранить файл";
            filename: "< No File >";
            position <=> root.output_playback_position;

            out property <string> new-filename;
            file_button_clicked => {
                self.playing = self.playing ? self.play_button_clicked() : self.playing;
                new-filename = root.save_audio_file();
                self.filename = new-filename == "" ? self.filename : new-filename;
            }
        }
    }
}
