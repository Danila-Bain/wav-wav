import { Button, VerticalBox, TextEdit, SpinBox, CheckBox, Slider, HorizontalBox } from "std-widgets.slint";
import {MyButton} from "./my-button.slint"; 

import "./res/fonts/Neucha-Regular.ttf";
import "./res/fonts/RubikMoonrocks-Regular.ttf";
import "./res/fonts/IrishGrover-Regular.ttf";


export component Player inherits Rectangle {
    in-out property <string> filename;
    in-out property <float> position: 0.0;  // Playback position in seconds;
    in-out property <float> duration: 0.001; // Playback duration in seconds;
    in-out property <bool> playing: true;
    in-out property <bool> dragged: false;
    in-out property <image> waveform: @image-url("res/waveform.png");

    // callback play_button_clicked <=> play_button.clicked;
    callback play_button_clicked() -> bool;
    // callback choose_file_button_clicked <=> choose_file_button.clicked;

    callback file_button_clicked <=> file_button.clicked;
    callback seek_audio(float);

    in property <string> file-button-text <=> file_button.text;

    background: black.transparentize(30%);
    border-radius: 10pt;

    VerticalBox {

        HorizontalBox {

            spacing: 20px;

            play_button := Rectangle {

                out property pressed <=> play_button_touch.pressed;
                width: 40px;
                height: 40px;
                border-radius: 20px;
                background: pressed ? gray : white;

                callback clicked <=> play_button_touch.clicked;

                play_button_touch := TouchArea {
                    clicked => {
                        playing = root.play_button_clicked();
                    }
                }

                Image {
                    source: playing ? @image-url("res/icons/pause.svg") : @image-url("res/icons/play.svg");
                }
            }

            // max-height: 20px;
            // play_button := MyButton {
            //     text-y: -self.font-size * 35%;
            //     width: 40px;
            //     height: 40px;
            //     border-radius: 20px;
            //     text: playing ? "⏸" : "⏵";
            //     font-size: 60px;
            //     // border-color: white;
            //     // border-width: 2px;
            //
            //     // background: white;
            //     background: self.pressed ? gray : white;
            //     text-color: black;
            //
            //     clicked => {
            //         playing = root.play_button_clicked();
            //     }
            // }

            Text {
                font-family: "Neucha";
                text: filename;
                color: white;
                vertical-alignment: TextVerticalAlignment.center;
            }

            file_button := MyButton {
                width: 33%;
                text: "Выбрать файл";
                text-color: black;
                font-size: 26px;
                // font-family: "RubikMoonrocks";
                background: self.pressed ? gray : white;
            }
        }

        // Slider {
        //     max-width: parent.width;
        //     height: 20px;
        //     minimum: 0;
        //     maximum: 1;
        //     value <=> root.playback_position;
        //     changed => {
        //         seek_audio(playback_position);
        //         debug("New value: ", self.value);
        //     }
        // }

        Rectangle {
            height: 50px;
        }

        HorizontalLayout {

            spacing: 10px;
            in property <length> time-width: 35px;

            Text {
                text: "\{(position / 60.).floor()}:\{(position.mod(60.) / 10.).floor()}\{position.mod(10.).floor()}";
                color: white;
                font-size: 20px;
                vertical-alignment: TextVerticalAlignment.center;
                width: time-width;
            }

            slider := Rectangle {
                // width: 100%;
                height: 40px;
                // background: white.transparentize(70%);

                slider-ruler := Rectangle {
                    height: 5px;
                    width: 95%;
                    y: (parent.height - self.height) * 0.5;
                    background: white;
                }

                Image {
                    source: root.waveform;
                    width: 95%;
                    height: 100px;
                    y: (parent.height) * 0.5 - self.height;
                    image-fit: ImageFit.fill;
                    image-rendering: smooth;
                }

                // waveform := Path {
                //     width: 95%;
                //     height: 10px;
                //     viewbox-height: 2.;
                //     viewbox-width: 1000.;
                //     y: (parent.height) * 0.5 - self.height;
                //     commands: root.waveform-fommands;
                //     stroke: red;
                //     stroke-width: 1px;
                //     fill: blue;
                // }

                // Text {
                //     text: "@";
                //     x: root.playback_position * (parent.width - 20px);
                //     color: white;
                //     font-family: "RubicMoonrocks";
                // }

                slider-knob := Rectangle {
                    width: self.height / 2;
                    height: 25px;
                    x: 50% * 5% * parent.width + 95% * root.position / root.duration * (parent.width) - self.width * 50%;
                    background: white;
                    border-color: black;
                    border-width: 2px;
                    border-radius: 6px;
                }

                TouchArea {
                    moved => {
                        root.dragged = true;
                        root.position = root.duration * clamp((self.mouse-x - 50% * 5% * self.width) / (95% * self.width), 0, 1);
                        // debug("MySlider moved: ", root.position);
                    }

                    pointer-event(ptrevent) => {
                        if (ptrevent.kind == PointerEventKind.up) {
                            root.position = root.duration * clamp((self.mouse-x - 50% * 5% * self.width) / (95% * self.width), 0, 1);
                            seek_audio(root.position);
                            root.dragged = false;
                        }
                        // debug(ptrevent);
                    }
                }
            }

            Text {
                text: "\{(duration / 60.).floor()}:\{(duration.mod(60.) / 10.).floor()}\{duration.mod(10.).floor()}";
                color: white;
                font-size: 20px;
                vertical-alignment: TextVerticalAlignment.center;
                width: time-width;
            }
        }
    }
}
